static int BinarySearch(int[] array, int x)
{
  int left = 0;
  int right = array.Length - 1;
  
  while (left <= right)
  {
    int m = left + (right - left) / 2; // вычисление серединного элемента

    if (array[m] == x) return m; // если серединный элемент равен ключу, то выводим индекс серединного элемента

    if (array[m] < x) left = m + 1; // если серединный элемент меньше ключа, то смещаем левую границу

    else right = m - 1; // если серединный элемент больше ключа, то смещаем правую границу
  }

  return -1; // если не нашли соответствуюшего элемента, возвращаем "-1"
}


// Нахождение самого левого вхождения
static int LeftBinarySearch(int[] array, int x)
{
	int left = -1; // исключаем из возможных значений ответа
	int right = array.Length - 1; // ответ будет находится здесь
  
	while (left + 1 < right)
	{
		int m = left + (right - left) / 2; // вычисление серединного элемента

		if (array[m] < x) left = m; // если серединный элемент меньше искомого, то смещаем левую границу
		else right = m; // если серединный элемент больше либо равно искомому, то смещаем правую границу
	}

	if (array[right] == x) return right; // проверка, что действительно в этом месте нужный элемент
	return -1; // если не нашли соответствующего элемента, возвращаем "-1"
}


// Нахождение самого правого вхождения
static int RightBinarySearch(int[] array, int x)
{
	int left = 0; // ответ будет находится здесь
	int right = array.Length; // исключаем из возможных значений ответа
  
	while (left + 1 < right)
	{
		int m = left + (right - left) / 2; // вычисление серединного элемента

		if (array[m] <= x) left = m; // если серединный элемент меньше либо равно искомому, то смещаем левую границу
		else right = m; // если серединный элемент больше искомого, то смещаем правую границу
	}

	if (array[left] == x) return left; // проверка, что действительно в этом месте нужный элемент
	return -1; // если не нашли соответствующего элемента, возвращаем "-1"
}
